# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2
  heroku: circleci/heroku@1.2.6


# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test:
    # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.8 container
    # Change the version below to your required version of python
    environment:
      IMAGE_NAME: remi1990/ocr_p13
    docker:
#      - image: docker:17.05.0-ce-git
      - image: cimg/python:3.8
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - setup_remote_docker

      - run:
          name: Run tests
          # setting up a dummy secret key for tests purpose
          environment:
            SECRET_KEY: 1g1o%gdki4s%(nsno9kl!os4zmaz4!gvf*w^@w4)75xl6x=_66
          command: pytest -s --no-migrations
      - run:
          name: Run black
          command: black .

      - run:
          name: Build Docker image
          command: docker build -t $IMAGE_NAME:$CIRCLE_SHA1 .

      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$docker_hub_password" | docker login -u "$docker_hub_username" --password-stdin
            docker push $IMAGE_NAME:$CIRCLE_SHA1

  build-and-deploy:
    environment:
      IMAGE_NAME: remi1990/ocr_p13:$CIRCLE_SHA1 .
    docker:
      - image: cimg/python:3.8
    steps:
      - setup_remote_docker
      - checkout
      - heroku/install


#          Install Heroku CLI on the build machine
      - run:
          command: sudo curl https://cli-assets.heroku.com/install.sh | sh

#          Login to Heroku registry passing our Heroku API Key as a parameter
      - run:
          command: heroku_api_key=${HEROKU_TOKEN} heroku container:login

#           Creating the app
      - run:
          command: heroku_api_key=${HEROKU_TOKEN} heroku create oc-lettings-rk || true
#          Building and pushing our docker image to Heroku registry
      - run:
          command: heroku_api_key=${HEROKU_TOKEN} heroku container:push -a oc-lettings-rk web
#         Setting the environment variable
      - run:
          command: > 
            heroku_api_key=${HEROKU_TOKEN} heroku config:set SECRET_KEY=${SECRET_KEY} \
            -a oc-lettings-rk web

      - run:
          command: >
            heroku_api_key=${HEROKU_TOKEN} heroku config:set SENTRY_DSN=${SENTRY_DSN} \
            -a oc-lettings-rk web

#         Releasing our docker image to Heroku
      - run:
          command: heroku container:release -a oc-lettings-rk web




workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
      - build-and-deploy:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                - master



#  https://circleci.com/blog/using-circleci-workflows-to-replicate-docker-hub-automated-builds/:

##          Building and pushing our docker image to Heroku registry
#          heroku_api_key=${HEROKU_TOKEN} heroku container:push -a $IMAGE_NAME web
##          Releasing the new version of our app
#          heroku_api_key=${HEROKU_TOKEN} heroku container:release -a $IMAGE_NAME web


#todo Veuillez ne pas stocker les identifiants Sentry ou toute autre donnée sensible dans le
#  code source, utiliser pyenv pour ça
#  (utilisez des variables d'environnement). Cela est valable également pour toutes les données sensibles du site.


